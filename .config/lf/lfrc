# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# execute current file (must be executable)
map x $$f
map X !$f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}



# TKJ ----------------------------------------------------
set icons true
set incsearch
set incfilter
set number
set relativenumber
set promptfmt "\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f\033[0m" #default
# set promptfmt "\033[34;1m%d\033[0m\033[1m%f\033[0m"
# set drawbox

map zz extract

cmd trash %trash-put $fx
map <delete> trash

cmd open_dolphin %dolphin $(pwd) > /dev/null 2> /dev/null &
map D open_dolphin 

cmd mkdir %IFS=" "; mkdir -- "$*"
map a push :mkdir<space>

cmd new_folder_from_selection %{{
    set -f
    printf " Directory name: "
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}
map <c-a> new_folder_from_selection 

cmd new_file %IFS=" "; touch -- "$*"
map A push :new_file<space>


cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}
map R bulk-rename

cmd yank-path $printf '%s' "$fx" | wl-copy -n
map Y yank-path

cmd set-wallpaper ${{
    plasma-apply-wallpaperimage $(realpath $f)
}}
map W set-wallpaper


# Þarft að installa ctpv fyrir þetta (er á aurnum)
# Svo þarf líka sérstök forrit fyrir hverja gerð
# af preview, sjá readmeið
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id


cmd fzf_jump_max_1 ${{
    res="$(fd -E backups/ -H . --maxdepth 1 | fzf --reverse --header='Jump to location (max depth 1)' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}
cmd fzf_jump_max_3 ${{
    res="$(fd -E backups/ -H . --maxdepth 3 | fzf --reverse --header='Jump to location (max depth 3)' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}
cmd fzf_jump ${{
    res="$(fd -E backups/ -H . | fzf --reverse --header='Jump to location (no max depth)' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map t :fzf_jump_max_3
map <c-t> :fzf_jump
map <a-t> :fzf_jump_max_1

map <c-f> filter

cmd on-cd &{{
    case "$PWD" in
        */bokasafn*)
            lf -remote "send $id set ratios 1:3:3"
            lf -remote "send $id echomsg changed ratios to 1:3:3"
            ;;
        *)
            # restore sorting on directory exit
            lf -remote "send $id set ratios 1:2:3"
            # lf -remote "send $id echomsg restored ratios to 1:2:3"
            ;;
    esac
}}

# run on startup too
on-cd



